using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Sirenix.OdinInspector;

public enum NodeType
{
    Minor,
    Notable,
    Keystone
}

[CreateAssetMenu(menuName = "Skill Tree/Node")]
public class Node : ScriptableObject
{
    public string Name;
    public Sprite icon;
    public Vector2 coordinates;
    public NodeType nodeType;
    public bool isStartingNode = false;
    public List<PowerUp> powerUps = new List<PowerUp>();

    private void OnValidate()
    {
        AutoGenerateCoordinates();
        AutoGenerateIcon();
        AutoGenerateName();

        for (int i = 0; i < powerUps.Count; i++)
        {
            powerUps[i].AutoGenerateDescription();
        }
    }

    [System.Serializable]
    public class PowerUp
    {
        public string Description;
        public StatType StatType;
        public Stat Stat;
        public float value;

        public void AutoGenerateDescription()
        {
            if (StatManager.StatDictionary == null || !StatManager.StatDictionary.ContainsKey(Stat))
                return;

            string statStr = StatManager.StatDictionary[Stat].name;

            switch (StatType)
            {
                case StatType.PercentValue:
                    Description = value + "% increased " + StatManager.StatDictionary[Stat].InGameName;
                    break;
                case StatType.FlatValue:
                    Description = value + " to " + StatManager.StatDictionary[Stat].InGameName;
                    break;
                case StatType.FinalMultiplier:
                    switch (value)
                    {
                        case 0.5f:
                            Description = StatManager.StatDictionary[Stat].InGameName + " is halved.";
                            break;

                        case 2f:
                            Description = StatManager.StatDictionary[Stat].InGameName + " is doubled.";
                            break;

                        case 3f:
                            Description = StatManager.StatDictionary[Stat].InGameName + " is tripled.";
                            break;

                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }
        }

        public void ApplyPowerUp()
        {
            Player.instance.AddStat(StatManager.CreateStat(Stat, StatType, value));
        }

        public void UnapplyPowerUp()
        {
            Player.instance.AddStat(StatManager.CreateStat(Stat, StatType, -value));
        }
    }

    [ReadOnly] public List<Node> connectedNodes;

    public bool IsActive
    {
        get
        {
            return isActive;
        }
        set
        {
            if(value != isActive)
            {
                isActive = value;
                ApplyPowerUps(value);
                OnActiveChanged?.Invoke(value);
                SkillTreeManager.instance.RefreshSkillTree();
            }
        }
    }

    public System.Action<bool> OnActiveChanged;

    [ReadOnly, SerializeField] bool isActive;

    [Header("Connect Nodes")]
    [SerializeField] Node NodeToConnect;

    public bool CanBeToggledOn()
    {
        if (IsActive)
            return false;

        if (Player.instance.skillPoints <= 0)
            return false;

        if (isStartingNode)
            return true;

        for (int i = 0; i < connectedNodes.Count; i++)
        {
            if (connectedNodes[i].isActive)
                return true;
        }

        return false;
    }

    public bool CanBeToggledOff()
    {
        if (!IsActive)
            return false;

        //add active connected nodes to a list
        List<Node> activeConnectedNodes = new List<Node>();

        for (int i = 0; i < connectedNodes.Count; i++)
        {
            if (connectedNodes[i].isActive)
                activeConnectedNodes.Add(connectedNodes[i]);
        }

        //loop through all active connected nodes to see if they will still be connected to the start
        for (int i = activeConnectedNodes.Count - 1; i >= 0; i--)
        {
            bool didTurnOff = false;

            List<Node> checkedNodes = new List<Node>();
            List<Node> nodesToCheck = new List<Node>();

            nodesToCheck.Add(activeConnectedNodes[i]);

            while (nodesToCheck.Count > 0)
            {
                Node nodeBeingChecked = nodesToCheck[0];

                nodesToCheck.Remove(nodeBeingChecked);
                checkedNodes.Add(nodeBeingChecked);

                if (nodeBeingChecked.isStartingNode && nodeBeingChecked.isActive)
                {
                    activeConnectedNodes.Remove(activeConnectedNodes[i]);
                    didTurnOff = true;

                    if (activeConnectedNodes.Count == 0)
                        return true;

                    break;
                }

                for (int j = 0; j < nodeBeingChecked.connectedNodes.Count; j++)
                {
                    if (nodeBeingChecked.connectedNodes[j] == this)
                        continue;
                    if (!nodeBeingChecked.connectedNodes[j].isActive)
                        continue;
                    if (checkedNodes.Contains(nodeBeingChecked.connectedNodes[j]))
                        continue;
                    if (nodesToCheck.Contains(nodeBeingChecked.connectedNodes[j]))
                        continue;

                    nodesToCheck.Add(nodeBeingChecked.connectedNodes[j]);
                }
            }

            if (!didTurnOff)
                return false;
        }

        if (activeConnectedNodes.Count == 0)
            return true;
        else
            return false;
    }  

    public void ToggleNode()
    {
        if (CanBeToggledOn())
        {
            Player.instance.skillPoints--;
            IsActive = true;
        }
        else if (CanBeToggledOff())
        {
            Player.instance.skillPoints++;
            IsActive = false;
        }
    }

    public void ApplyPowerUps(bool toggle)
    {
        if (toggle)
        {
            for (int i = 0; i < powerUps.Count; i++)
            {
                powerUps[i].ApplyPowerUp();
            }
        }
        else
        {
            for (int i = 0; i < powerUps.Count; i++)
            {
                powerUps[i].UnapplyPowerUp();
            }
        }

        GameManager.Save();
    }

    [Button]
    public void ConnectOrRemoveNode()
    {
        if(connectedNodes.Contains(NodeToConnect))
        {
            connectedNodes.Remove(NodeToConnect);
            NodeToConnect.connectedNodes.Remove(this);
        }
        else
        {
            connectedNodes.Add(NodeToConnect);
            NodeToConnect.connectedNodes.Add(this);
        }

        NodeToConnect = null;
    }

    void AutoGenerateName()
    {
        if (StatManager.StatDictionary == null || !StatManager.StatDictionary.ContainsKey(powerUps[0].Stat))
            return;

            switch (nodeType)
        {
            case NodeType.Minor:
                Name = "Minor " + StatManager.StatDictionary[powerUps[0].Stat].InGameName;
                break;
            case NodeType.Notable:
                Name = "Major " + StatManager.StatDictionary[powerUps[0].Stat].InGameName;
                break;
            case NodeType.Keystone:

                break;
            default:
                break;
        }
    }

    void AutoGenerateIcon()
    {
        if (StatManager.StatDictionary == null || !StatManager.StatDictionary.ContainsKey(powerUps[0].Stat))
            return;

        if (nodeType == NodeType.Minor || nodeType == NodeType.Notable)
            icon = StatManager.StatDictionary[powerUps[0].Stat].Icon;
    }

    void AutoGenerateCoordinates()
    {
        string text = name;
        string[] coords = text.Split(" ");

        if (coords.Length == 2)
        {
            coordinates.x = int.Parse(coords[0]);
            coordinates.y = int.Parse(coords[1]);
        }
    }
}